generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  MANAGER
  TESTER
  APPROVER
}

enum ExecutionStatus {
  PENDING
  APPROVED
  REPROVED
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String

  // Auditoria
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  passwordResetTokens PasswordResetToken[]
  userProjects        UserOnProject[]
  projectsOwned       Project[]            @relation("ProjectOwner")
  executions          Execution[]
}

model Project {
  id          Int      @id @default(autoincrement())
  ownerId     Int
  owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  name        String   @db.VarChar(100) // ou @db.Citext se quiser case-insensitive
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  testCases    TestCase[]
  userProjects UserOnProject[]

  @@unique([ownerId, name], map: "project_owner_name_unique")
  @@index([ownerId])
}

model UserOnProject {
  id        Int  @id @default(autoincrement())
  userId    Int
  projectId Int
  role      Role

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([role])
}

model TestCase {
  id           Int     @id @default(autoincrement())
  title        String
  description  String? @db.Text
  precondition String? @db.Text
  steps        String  @db.Text
  expected     String  @db.Text

  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  executions Execution[]
  evidences  Evidence[] // mant√©m se quiser anexar direto ao caso (opcional)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([projectId])
}

model Execution {
  id         Int             @id @default(autoincrement())
  status     ExecutionStatus @default(PENDING)
  executedAt DateTime        @default(now())
  notes      String?         @db.Text

  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  testCaseId Int
  testCase   TestCase @relation(fields: [testCaseId], references: [id], onDelete: Cascade)

  evidences Evidence[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([testCaseId, executedAt])
}

model Evidence {
  id          Int        @id @default(autoincrement())
  url         String
  type        String
  checksum    String // ex.: sha256 do arquivo
  executionId Int?
  execution   Execution? @relation(fields: [executionId], references: [id], onDelete: Cascade)
  testCaseId  Int?
  testCase    TestCase?  @relation(fields: [testCaseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([executionId])
  @@index([testCaseId])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
}
