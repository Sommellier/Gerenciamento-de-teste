name: CI

on:
  push:
    branches: ['**']
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    name: SonarCloud Scan (backend)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports: ['5432:5432']
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 4422
          POSTGRES_DB: qa_test_manager
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgres://postgres:4422@localhost:5432/qa_test_manager
      JWT_SECRET: qualquercoisa
      FRONTEND_URL: http://localhost:9000
      EMAIL_FROM: fake@example.com
      EMAIL_PASSWORD: fakepassword
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
      - name: Install backend deps
        run: npm ci
        working-directory: ./backend
      - name: Prisma generate
        run: npx prisma generate
        working-directory: ./backend
      - name: Migrate DB
        run: npx prisma migrate deploy
        working-directory: ./backend
      - name: Unit tests + coverage
        run: npm run test:coverage -- --runInBand
        working-directory: ./backend
      - name: SonarCloud
        working-directory: ./backend
        env: { SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} }
        run: |
          npm i -g sonarqube-scanner
          npx sonar-scanner \
            -Dsonar.projectKey=Sommellier_Gerenciamento-de-teste \
            -Dsonar.organization=sommellier \
            -Dsonar.sources=src \
            -Dsonar.exclusions=**/*.d.ts,**/dist/**,**/migrations/**,**/prisma/**,src/tests/** \
            -Dsonar.tests=src/tests \
            -Dsonar.test.inclusions=src/**/*.test.ts,src/**/*.spec.ts \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.coverage.exclusions=src/main.ts,src/server.ts,src/tests/** \
            -Dsonar.newCode.referenceBranch=main \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}

  e2e:
    name: Cypress E2E (front+api)
    runs-on: ubuntu-latest
    needs: []   # coloque [sonarcloud] se quiser rodar só depois do Sonar
    services:
      postgres:
        image: postgres:15
        ports: ['5432:5432']
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 4422
          POSTGRES_DB: qa_test_manager
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgres://postgres:4422@localhost:5432/qa_test_manager
      JWT_SECRET: qualquercoisa
      FRONTEND_URL: http://localhost:9000
      CYPRESS_baseUrl: http://localhost:9000
      CYPRESS_apiUrl: http://localhost:3000
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      # Backend
      - name: Install backend deps
        run: npm ci
        working-directory: ./backend
      - name: Prisma generate
        run: npx prisma generate
        working-directory: ./backend
      - name: Migrate DB
        run: npx prisma migrate deploy
        working-directory: ./backend

      # Frontend
      - name: Install frontend deps
        run: npm ci
        working-directory: ./frontend

      # Executa Cypress iniciando API + Front juntos
      - name: Run Cypress
        uses: cypress-io/github-action@v6
        with:
          start: |
            npm --prefix backend run start:ci
            npx --yes wait-on http://localhost:3000/health
            npx --yes concurrently -k "npm:dev:front"
          wait-on: |
            http://localhost:3000/health
            http://localhost:9000
          working-directory: .
          browser: chrome
          config: video=false
          # env: grep=@smoke   # opcional: rodar só smoke em PR
        env:
          # se o front precisa do Quasar CLI:
          PATH: ${{ env.PATH }}:~/.npm-global/bin

      # Artefatos se falhar
      - if: failure()
        name: Upload screenshots
        uses: actions/upload-artifact@v4
        with: { name: cypress-screenshots, path: cypress/screenshots }
      - if: failure()
        name: Upload videos
        uses: actions/upload-artifact@v4
        with: { name: cypress-videos, path: cypress/videos }
